'''Python simulation submitters.

.. autosummary::

    ClusterSubmitter
    WorkstationSubmitter
'''
from .submitters import GenericSubmitter, QsubSubmitter


class ClusterSubmitter(QsubSubmitter):
    '''
    Submit python jobs on a cluster.

    A file named ``cluster_submit.sh`` must be present in the current working
    directory. This script will be run by the qsub command.
    '''

    def __init__(self, argCreator, appName, outputDir, label,
                 extra_qsub_params='', **kw):
        '''
        Initialize.

        Parameters
        ----------
        argCreator : ArgumentCreator object

        appName : string
            A python script that the cluster_submit.sh script should run.

        outputDir : string, optional, default: "."
            Output directory, should be the same output directory of data
            generated by the script.

        blocking : bool
            Whether a running instance should block. Note that this will be
            ignored on a cluster. The commands are always **non-blocking**.

        numCPU : int
            Number of cores to use for OpenMP programs

        Keyword arguments
        -----------------
        rtLimit : string
            Hard runtime limit, (passed as -l h_rt to qsub)

        '''
        interactive = kw.pop('interactive', None) # Unused, never interactive

        self.submitScript = 'cluster_submit.sh '
        self.default_qsub_params = '-notify '
        self.appName = appName
        scriptName = self.submitScript + appName
        rtLimit = kw.pop('rtLimit', None)
        numCPU  = kw.get('numCPU', 1)

        if (rtLimit is not None):
            rtLimitParam = '-l h_rt=\'{0}\''.format(rtLimit)
        else:
            rtLimitParam = ''
        qsub_params = self.default_qsub_params + rtLimitParam
        if numCPU > 1:
            qsub_params += ' -pe OpenMP {0}'.format(numCPU)
        elif (numCPU < 1):
            raise ValueError("numCPU must be >= 1.")
        qsub_params += ' ' + extra_qsub_params
        QsubSubmitter.__init__(self, argCreator, scriptName, qsub_params,
                outputDir, label, **kw)


class WorkstationSubmitter(GenericSubmitter):
    '''
    Submit jobs on a workstation.

    This will submit the python command on a generic processor machine.
    '''

    def __init__(self, argCreator, appName, outputDir, label, **kw):
        '''
        Initialize the submitter.

        Parameters
        ----------
        argCreator : ArgumentCreator

        appName : string
            Path to the application that should be run by Python.

        outputDir : string, optional, default: "."
            Output directory, should be the same output directory of data
            generated by the script. Note that currently this does not have any
            effect.

        label : string
            TODO

        Keyword arguments
        -----------------
        blocking : bool
            Whether a running instance should block.

        numCPU : int
            Number of cores to use for OpenMP programs. This parameter is here
            only for interface compatibility. It is ignored in this class

        interactive : bool
            Whether to run python with an -i parameter. Default is False.
        '''
        interactive = kw.pop('interactive', False)
        self.progName = 'python '
        if (interactive):
            self.progName += ' -i '
        commandStr = self.progName + appName
        GenericSubmitter.__init__(self, argCreator, commandStr, outputDir,
                label, **kw)

